name: CMake Build

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      SNEEDACITY_CMAKE_GENERATOR: ${{ matrix.config.generator }}
      SNEEDACITY_ARCH_LABEL: ${{ matrix.config.arch }}
      # Windows codesigning
      # This variables will be used by all the steps
      WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      # Conan home location to be used for cache action
      CONAN_USER_HOME: "${{ github.workspace }}/conan-home/"
      CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-home/short"
    strategy:
      fail-fast: false
      matrix:
        config:

        - name: Ubuntu_18.04
          os: ubuntu-18.04
          arch: x86_64 # as reported by `arch` or `uname -m`
          generator: Unix Makefiles

        - name: macOS_Intel
          os: macos-latest
          arch: Intel # as reported by Apple menu > About This Mac
          generator: Xcode

        - name: Windows_32bit
          os: windows-latest
          arch: 32bit # as reported by Windows Settings > System > About
          generator: Visual Studio 16 2019

        - name: Windows_64bit
          os: windows-latest
          arch: 64bit # as reported by Windows Settings > System > About
          generator: Visual Studio 16 2019

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Dependencies
      run: |
        exec bash "scripts/ci/dependencies.sh"

    - name: Environment
      run: |
        source "scripts/ci/environment.sh"
    
    #- name: Install Apple codesigning certificates
    #  uses: apple-actions/import-codesign-certs@v1
    #  if: startswith( matrix.config.os, 'macos' ) && github.event_name == 'push' && github.repository_owner == 'audacity'
    #  with: 
    #    p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
    #    p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

    - name: Cache for .conan
      id: cache-conan
      uses: actions/cache@v2
      env:
        cache-name: cache-conan-modules
      with:
        path: ${{ env.CONAN_USER_HOME }}
        key: host-${{ matrix.config.name }}-${{ hashFiles('cmake-proxies/CMakeLists.txt') }}
        restore-keys: |
          host-${{ matrix.config.name }}-

    - name: Configure
      env:
        # Error reporing
        SENTRY_DSN_KEY: ${{ secrets.SENTRY_DSN_KEY }}
        SENTRY_HOST: ${{ secrets.SENTRY_HOST }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        # Apple code signing
        APPLE_CODESIGN_IDENTITY: ${{ secrets.APPLE_CODESIGN_IDENTITY }}
        APPLE_NOTARIZATION_USER_NAME: ${{ secrets.APPLE_NOTARIZATION_USER_NAME }}
        APPLE_NOTARIZATION_PASSWORD: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
      run: |
        exec bash "scripts/ci/configure.sh"

    - name: Build
      run: |
        exec bash "scripts/ci/build.sh"

    - name: Install
      run: |
        exec bash "scripts/ci/install.sh"

    - name: Package
      run: |
        exec bash "scripts/ci/package.sh"

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: Sneedacity_${{ matrix.config.name }}_${{ github.run_id }}_${{ env.GIT_HASH_SHORT }}
        path: |
          build/package/*
          !build/package/_CPack_Packages
        if-no-files-found: error
    
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master')
    steps:
      - name: Create Release
        id: create_release
        uses: Ckath/create-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest-sneed
          release_name: Latest Sneed
          body: |
              Newest working commit on master
          prerelease: true

      - name: Checkout
        uses: actions/checkout@v2

      - name: Environment
        run: |
          source "scripts/ci/environment.sh"

      - uses: actions/download-artifact@v2.0.10
        with:
          name: Sneedacity_Ubuntu_18.04_${{ github.run_id }}_${{ env.GIT_HASH_SHORT }}
          path: artifacts/
      - id: linux-artifact
        run: echo ::set-output name=file::$(ls artifacts/*linux*.AppImage)

      - uses: actions/download-artifact@v2.0.10
        with:
          name: Sneedacity_Windows_32bit_${{ github.run_id }}_${{ env.GIT_HASH_SHORT }}
          path: artifacts/
      - id: win32-artifact
        run: echo ::set-output name=file::$(ls artifacts/*win*32bit.zip)

      - uses: actions/download-artifact@v2.0.10
        with:
          name: Sneedacity_Windows_64bit_${{ github.run_id }}_${{ env.GIT_HASH_SHORT }}
          path: artifacts/
      - id: win64-artifact
        run: echo ::set-output name=file::$(ls artifacts/*win*64bit.zip)

      - uses: actions/download-artifact@v2.0.10
        with:
          name: Sneedacity_macOS_Intel_${{ github.run_id }}_${{ env.GIT_HASH_SHORT }}
          path: artifacts/
      - id: mac-artifact
        run: echo ::set-output name=file::$(ls artifacts/*macos*.dmg)

      - name: Upload release asset (Ubuntu)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: Sneedacity_appimage.AppImage
          asset_path: ${{ steps.linux-artifact.outputs.file }}
          asset_content_type: application/x-executable

      - name: Upload release asset (Windows 32bit)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: Sneedacity_Windows_32bit.zip
          asset_path: ${{ steps.win32-artifact.outputs.file }}
          asset_content_type: application/zip

      - name: Upload release asset (Windows 64bit)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: Sneedacity_Windows_64bit.zip
          asset_path: ${{ steps.win64-artifact.outputs.file }}
          asset_content_type: application/zip

      - name: Upload release asset (Mac OS)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: Sneedacity_macOS.dmg
          asset_path: ${{ steps.mac-artifact.outputs.file }}
          asset_content_type: application/x-bzip2
